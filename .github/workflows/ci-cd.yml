name: Hospital Management System CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOTNET_VERSION: '8.0.x'
  NODE_VERSION: '20.x'

jobs:

  # Backend Testing Job
  backend-tests:
    name: Backend Tests (.NET 8)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache .NET packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore HospitalManagement.API/HospitalManagement.API.sln

      - name: Build backend
        run: dotnet build HospitalManagement.API/HospitalManagement.API.sln --configuration Release --no-restore

      - name: Run unit tests
        run: dotnet test Tests/HospitalManagement.Tests/HospitalManagement.Tests.csproj --configuration Release --verbosity normal --collect:"XPlat Code Coverage" --logger trx --results-directory TestResults

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: TestResults/

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: always()
        with:
          file: TestResults/*/coverage.cobertura.xml
          flags: backend
          name: backend-coverage

#   # Integration Tests Job - Fixed
#   integration-tests:
#     name: Integration Tests
#     runs-on: ubuntu-latest
#     needs: [backend-tests]

#     services:
#       sqlserver:
#         image: mcr.microsoft.com/mssql/server:2022-latest
#         env:
#           SA_PASSWORD: YourStrong@Passw0rd123
#           ACCEPT_EULA: Y
#           MSSQL_PID: Express
#         ports:
#           - 1433:1433
#         options: >-
#           --health-cmd="/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P YourStrong@Passw0rd123 -Q 'SELECT 1' -b -o /dev/null"
#           --health-interval=10s
#           --health-timeout=30s
#           --health-retries=20
#           --health-start-period=120s

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Setup .NET
#         uses: actions/setup-dotnet@v4
#         with:
#           dotnet-version: ${{ env.DOTNET_VERSION }}

#       - name: Restore dependencies
#         run: dotnet restore HospitalManagement.sln

#       - name: Build backend
#         run: dotnet build HospitalManagement.sln --configuration Release --no-restore

#       - name: Wait for SQL Server to be ready
#         run: |
#           echo "Waiting for SQL Server to be ready..."
#           for i in {1..60}; do
#             if docker exec $(docker ps -q --filter ancestor=mcr.microsoft.com/mssql/server:2022-latest) /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P YourStrong@Passw0rd123 -Q "SELECT 1" > /dev/null 2>&1; then
#               echo "SQL Server is ready!"
#               break
#             fi
#             echo "Attempt $i: SQL Server not ready yet, waiting..."
#             sleep 2
#           done

#       - name: Create test database
#         run: |
#           docker exec $(docker ps -q --filter ancestor=mcr.microsoft.com/mssql/server:2022-latest) /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P YourStrong@Passw0rd123 -Q "CREATE DATABASE HospitalManagementTestDB;"

#       - name: Run integration tests
#         env:
#           ConnectionStrings__DefaultConnection: "Server=localhost,1433;Database=HospitalManagementTestDB;User Id=sa;Password=YourStrong@Passw0rd123;TrustServerCertificate=true;MultipleActiveResultSets=true;"
#           ASPNETCORE_ENVIRONMENT: Testing
#         run: dotnet test Tests/HospitalManagement.Tests/HospitalManagement.Tests.csproj --filter "Category=Integration" --configuration Release --verbosity normal --logger "console;verbosity=detailed"

  # Frontend Tests (Conditional)
  frontend-tests:
    name: Frontend Tests (Angular 19)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check if frontend exists
        id: check-frontend
        run: |
          if [ -d "hospital-management-frontend" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup Node.js
        if: steps.check-frontend.outputs.exists == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: hospital-management-frontend/package-lock.json

      - name: Install frontend dependencies
        if: steps.check-frontend.outputs.exists == 'true'
        run: |
          cd hospital-management-frontend
          npm ci

      - name: Run frontend tests
        if: steps.check-frontend.outputs.exists == 'true'
        run: |
          cd hospital-management-frontend
          npm run test:ci || echo "Frontend tests not configured yet"

  # Notification Job
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [backend-tests, integration-tests, frontend-tests]
    if: always()
    steps:
      - name: Notify on success
        if: ${{ needs.backend-tests.result == 'success' && needs.integration-tests.result == 'success' }}
        run: |
          echo "✅ All tests passed successfully!"

      - name: Notify on failure
        if: ${{ needs.backend-tests.result == 'failure' || needs.integration-tests.result == 'failure' }}
        run: |
          echo "❌ Some tests failed!"
          exit 1
