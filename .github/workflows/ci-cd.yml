name: Hospital Management System CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOTNET_VERSION: '8.0.x'
  NODE_VERSION: '20.x'

jobs:
  # Backend Testing Job
  backend-tests:
    name: Backend Tests (.NET 8)
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Cache .NET packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: Restore dependencies
      run: dotnet restore HospitalManagement.API/HospitalManagement.API/HospitalManagement.API.csproj
      
    - name: Build backend
      run: dotnet build HospitalManagement.API/HospitalManagement.API/HospitalManagement.API.csproj --no-restore --configuration Release
      
    - name: Run unit tests
      run: dotnet test Tests/HospitalManagement.Tests/HospitalManagement.Tests.csproj --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage"
      
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: Tests/HospitalManagement.Tests/TestResults/
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: Tests/HospitalManagement.Tests/TestResults/*/coverage.cobertura.xml
        flags: backend
        name: backend-coverage

  # Frontend Testing Job
  frontend-tests:
    name: Frontend Tests (Angular 19)
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: hospital-management-frontend/package-lock.json
        
    - name: Install frontend dependencies
      run: |
        cd hospital-management-frontend
        npm ci
        
    - name: Lint frontend code
      run: |
        cd hospital-management-frontend
        npm run lint
        
    - name: Run frontend unit tests
      run: |
        cd hospital-management-frontend
        npm run test:ci
        
    - name: Build frontend
      run: |
        cd hospital-management-frontend
        npm run build --prod
        
    - name: Upload frontend build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: hospital-management-frontend/dist/

  # Integration Tests Job
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-tests]
    
    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2022-latest
        env:
          SA_PASSWORD: YourStrong@Passw0rd
          ACCEPT_EULA: Y
        ports:
          - 1433:1433
        options: >-
          --health-cmd="/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P YourStrong@Passw0rd -Q 'SELECT 1'"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore HospitalManagement.API/HospitalManagement.API/HospitalManagement.API.csproj
      
    - name: Build backend
      run: dotnet build HospitalManagement.API/HospitalManagement.API/HospitalManagement.API.csproj --no-restore --configuration Release
      
    - name: Wait for SQL Server
      run: |
        for i in {1..30}; do
          if /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P YourStrong@Passw0rd -Q "SELECT 1" > /dev/null 2>&1; then
            echo "SQL Server is ready"
            break
          fi
          echo "Waiting for SQL Server..."
          sleep 2
        done
        
    - name: Run integration tests
      env:
        ConnectionStrings__DefaultConnection: "Server=localhost,1433;Database=HospitalManagementTestDB;User Id=sa;Password=YourStrong@Passw0rd;TrustServerCertificate=true;"
      run: dotnet test Tests/HospitalManagement.Tests/HospitalManagement.Tests.csproj --filter "Category=Integration" --configuration Release --verbosity normal

  # Security Scanning Job
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Code Quality Job
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Install SonarCloud scanner
      run: dotnet tool install --global dotnet-sonarscanner
      
    - name: Build and analyze
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        dotnet sonarscanner begin /k:"hospital-management-system" /o:"your-org" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
        dotnet build HospitalManagement.API/HospitalManagement.API/HospitalManagement.API.csproj --configuration Release
        dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

  # Build and Package Job
  build-and-package:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, integration-tests]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: hospital-management-frontend/package-lock.json
        
    - name: Build backend for production
      run: |
        dotnet publish HospitalManagement.API/HospitalManagement.API/HospitalManagement.API.csproj \
          --configuration Release \
          --output ./publish/backend \
          --no-restore
          
    - name: Build frontend for production
      run: |
        cd hospital-management-frontend
        npm ci
        npm run build --prod
        
    - name: Build Docker images
      run: |
        docker build -t hospital-management-api:${{ github.sha }} -f Docker/Dockerfile.api .
        docker build -t hospital-management-frontend:${{ github.sha }} -f Docker/Dockerfile.frontend .
        
    - name: Save Docker images
      run: |
        docker save hospital-management-api:${{ github.sha }} | gzip > api-image.tar.gz
        docker save hospital-management-frontend:${{ github.sha }} | gzip > frontend-image.tar.gz
        
    - name: Upload Docker images
      uses: actions/upload-artifact@v3
      with:
        name: docker-images
        path: |
          api-image.tar.gz
          frontend-image.tar.gz

  # Deployment Job (only on main branch)
  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-package]
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download Docker images
      uses: actions/download-artifact@v3
      with:
        name: docker-images
        
    - name: Load Docker images
      run: |
        docker load < api-image.tar.gz
        docker load < frontend-image.tar.gz
        
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your deployment commands here
        # Example: kubectl apply -f k8s/staging/
        # Example: docker-compose -f docker-compose.staging.yml up -d

  # Notification Job
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, integration-tests, security-scan, code-quality]
    if: always()
    
    steps:
    - name: Notify on success
      if: ${{ needs.backend-tests.result == 'success' && needs.frontend-tests.result == 'success' && needs.integration-tests.result == 'success' }}
      run: |
        echo "✅ All tests passed successfully!"
        # Add notification logic (Slack, Teams, Email, etc.)
        
    - name: Notify on failure
      if: ${{ needs.backend-tests.result == 'failure' || needs.frontend-tests.result == 'failure' || needs.integration-tests.result == 'failure' }}
      run: |
        echo "❌ Some tests failed!"
        # Add notification logic for failures
